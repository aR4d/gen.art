/*
 * @name Simple Shapes
 * @description This examples includes a circle, square, triangle, and a flower.
 */
function setup() {
  // Create the canvas
  createCanvas(700, 500);
  background(200);

  // Set colors
  fill(204, 101, 192, 127);
  stroke(127, 63, 120);

  splatter2(350, 250);
  
  strokeWeight(20);
  point(350, 250);
  strokeWeight(0);
}

function splatter2(x0, y0) {
  const numberOfPoints = 15;
  const max_radius = 200;
  const min_radius = 50;
  let angle, x, y, radius = 0;
  let x1, y1 = 0;
  
  beginShape();
  
  for (let i = 1; i <= numberOfPoints; i++) {
    angle = 2 * PI * i / numberOfPoints;
    radius = random(min_radius, max_radius);
    //radius = 150;
    
    x = x0 + radius * cos(angle);
    y = y0 + radius * sin(angle);
    
    if (i === 1) {
      curveVertex(x,y);
    }
    
    curveVertex(x,y);
    line(x0, y0, x, y);
  }
  
  curveVertex(x,y);
  
  endShape();
}

function splatter(x0, y0, w, h) {
  const x_min = x0 - w / 2;
  const x_max = x0 + w / 2;
  const y_min = y0 - h / 2;
  const y_max = y0 + h / 2;
  const x1 = random(x_min, x_max);
  const y1 = random(y_min, y_max);
  const points = 1000;
  const std = 35;
  
  let x, y = 0;
  
  const validPoints = [];
  const invalidPoints = [];
  
  for (let i = 0; i < points; i++) {
    x = floor(randomGaussian(x1, std));
    y = floor(randomGaussian(y1, std));
    
    console.log(`[${x}][${y}]`);
    
    if (x > x_min && x < x_max && y > y_min && y < y_max) {
      validPoints.push({xx: x, yy: y});
    }
    else {
      invalidPoints.push({xx: x, yy: y});
    }
  }
  
  console.log(validPoints.length);
  console.log(invalidPoints.length);
  
  
  for (let i = 0; i < invalidPoints.length; i++) {
    stroke(55, 52, 235);
    strokeWeight(60);
    point(invalidPoints[i].xx, invalidPoints[i].yy);
    strokeWeight(0);
  }
  
  for (let i = 0; i < validPoints.length; i++) {
    stroke(55, 52, 235);
    strokeWeight(60);
    point(validPoints[i].xx, validPoints[i].yy);
    strokeWeight(0);
  }
  
  
  drawReference(x0, y0, x1, y1, w, h);
}

function drawReference(x0, y0, x1, y1, w, h) {
  const origin_x = x0 - w / 2;
  const origin_y = y0 - h / 2;
  rect(origin_x, origin_y, w, h);
  line(origin_x, y1, origin_x + w, y1);
  line(x1, origin_y, x1, origin_y + h);
  strokeWeight(10);
  point(x0, y0);
  point(x1, y1);
  strokeWeight(0);
}
